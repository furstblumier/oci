# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  list-dockerfiles:
    runs-on: ubuntu-latest
    outputs:
      dockerfiles: ${{ steps.set-dockerfiles.outputs.dockerfiles }}
    steps:
      - uses: actions/checkout@v2
      - id: set-dockerfiles
        run: echo "dockerfiles=$(basename dockerfiles/* | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
  build:
    needs: list-dockerfiles
    runs-on: ubuntu-latest
    strategy:
        matrix:
            dockerfiles: ${{ fromJson(needs.list-dockerfiles.outputs.dockerfiles) }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.dockerfiles }}
          tags: |
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
        
      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        # You may pin to the exact commit or the version.
        # uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0
        uses: docker/build-push-action@v5
        with:
          # List of a customs host-to-IP mapping (e.g., docker:10.180.0.1)
          # add-hosts: 
          # List of extra privileged entitlement (e.g., network.host,security.insecure)
          # allow: # optional
          # List of annotation to set to the image
          # annotations: # optional
          # List of attestation parameters (e.g., type=sbom,generator=image)
          # attests: # optional
          # List of build-time variables
          # build-args: # optional
          # List of additional build contexts (e.g., name=path)
          # build-contexts: # optional
          # Builder instance
          # builder: # optional
          # List of external cache sources for buildx (e.g., user/app:cache, type=local,src=path/to/dir)
          # cache-from: # optional
          # List of cache export destinations for buildx (e.g., user/app:cache, type=local,dest=path/to/dir)
          # cache-to: # optional
          # Optional parent cgroup for the container used in the build
          # cgroup-parent: # optional
          # Build's context is the set of files located in the specified PATH or URL
          context: ./dockerfiles/${{ matrix.dockerfiles }}
          # Path to the Dockerfile
          file: dockerfiles/${{ matrix.dockerfiles }}/${{ matrix.dockerfiles }}.dockerfile
          # List of metadata for an image
          labels: ${{ steps.meta.outputs.labels }}
          # Load is a shorthand for --output=type=docker
          # load: # optional, default is false
          # Set the networking mode for the RUN instructions during build
          # network: # optional
          # Do not use cache when building the image
          # no-cache: # optional, default is false
          # Do not cache specified stages
          # no-cache-filters: # optional
          # List of output destinations (format: type=local,dest=path)
          # outputs: # optional
          # List of target platforms for build
          # platforms: # optional
          # Generate provenance attestation for the build (shorthand for --attest=type=provenance)
          # provenance: # optional
          # Always attempt to pull all referenced images
          # pull: # optional, default is false
          # Push is a shorthand for --output=type=registry
          push: true
          # Generate SBOM attestation for the build (shorthand for --attest=type=sbom)
          # sbom: # optional
          # List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)
          # secrets: # optional
          # List of secret env vars to expose to the build (e.g., key=envname, MY_SECRET=MY_ENV_VAR)
          # secret-envs: # optional
          # List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)
          # secret-files: # optional
          # Size of /dev/shm (e.g., 2g)
          # shm-size: # optional
          # List of SSH agent socket or keys to expose to the build
          # ssh: # optional
          # List of tags
          tags: ${{ steps.meta.outputs.tags }}
          # Sets the target stage to build
          # target: # optional
          # Ulimit options (e.g., nofile=1024:1024)
          # ulimit: # optional
          # GitHub Token used to authenticate against a repository for Git context
          # github-token: # optional, default is ${{ github.token }}
                
